import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

// NOTE -- you need to have the kirbyEatFood.txt file in the same directory for this project. It needs to be on the same level
// as the code and should be accessible not within src but within the main folder of the project (same level as the .iml)
public class CSMidterm {
    public static class Foods {
        Scanner sc = new Scanner(System.in);
        private ArrayList<Foods> kirbyFoods = new ArrayList<Foods>();
        private String foodName;
        private double healAmount;

        protected void createDefaultFood() {
            Foods foods = new Foods();
            foods.foodName = "Maxim Tomato";        // default food, never changes (will reappend same food)
            foods.healAmount = 100;
            kirbyFoods.add(foods);
        }

        protected void createFood(String foodName, double healAmount) {
            Foods foods = new Foods();
            foods.foodName = foodName;
            foods.healAmount = healAmount;
            kirbyFoods.add(foods);
        }

        protected ArrayList<Foods> readFoodsList() {
            return this.kirbyFoods;
        }

        protected void readFoods() {
            System.out.println("*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");

            for (int i = 0; i < kirbyFoods.size(); i ++) {
                int currentFood = i + 1;
                System.out.println("Food number " + currentFood);
                System.out.println("    - Food Title: " + kirbyFoods.get(i).foodName);
                System.out.println("    - Heal Amount: " + kirbyFoods.get(i).healAmount + "\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
            }
        }
        protected void deleteFood() throws InterruptedException {       // handle exception for Thread.sleep
            System.out.println("*In a rush, you drop the food*");
            Thread.sleep(2000);
            System.out.println("'It is weighing me down!!!' You yell");
            Thread.sleep(2000);     // space out with 2000ms to give more time to read
            System.out.println("What is number of the food item you dropped?");
            int foodNumber = sc.nextInt();
            kirbyFoods.remove(foodNumber - 1);
            Thread.sleep(1000);
            System.out.println("You have successfully dropped a food item. Hopefully you won't need it for later...");
            Thread.sleep(1000);

        }
    }

    public static class Skills extends Foods {
        Scanner sc = new Scanner(System.in);
        private ArrayList<Skills> kirbySkills = new ArrayList<Skills>();
        private String skillDescription;
        private double skillDamage;

        protected void createDefaultSkill() {
            Skills skills = new Skills();
            skills.skillDescription = "Dove barrage";       // default skill, never changes (will reappend same skill)
            skills.skillDamage = 100;
            kirbySkills.add(skills);
        }

        protected void createSkill(String skillDescription, double skillDamage) {
            Skills skills = new Skills();
            skills.skillDescription = skillDescription;
            skills.skillDamage = skillDamage;
            kirbySkills.add(skills);
        }

        protected void readSkills() {

            System.out.println("*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");

            for (int i = 0; i < kirbySkills.size(); i ++) {
                int currentSkill = i + 1;
                System.out.println("Skill number " + currentSkill + ": ");
                System.out.println("    - Skill Description: " + kirbySkills.get(i).skillDescription);
                System.out.println("    - Skill Damage: " + kirbySkills.get(i).skillDamage + "\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
            }
        }

        protected ArrayList<Skills> readSkillsList() {      // getter method for reading skillsList
            return kirbySkills;
        }

        protected void deleteSkill() throws InterruptedException {      // throw exception for Thread.sleep
            System.out.println("*You carefully choose which skill to lose*");
            Thread.sleep(2000);
            System.out.println("Hopefully you do not need this skill to defeat the magic mirror...");
            Thread.sleep(2000);
            System.out.println("What is the skill number?");
            int skillNumber = sc.nextInt();
            kirbySkills.remove(skillNumber - 1);
            Thread.sleep(1000);
            System.out.println("*You feel yourself slightly weaken as you successfully drop the skill*");
            Thread.sleep(1000);     // wait before displaying user menu
        }
    }

    public static class Kirby extends Skills {

        private String username;
        private double health;
        private String offense;
        private String defense;

        Kirby(String username) {
            this.health = 100;      // Predefined health
            this.username = username;
        }

        @Override
        public String toString() {
            ArrayList<Skills> skillsList = this.readSkillsList();
            ArrayList<Foods> foodsList = this.readFoodsList();

            // Evaluate Kirby's total defense and offense based on skills/healing items equipped
            int totalDamage = 0;
            int totalHeal = 0;

            for (int i = 0; i < skillsList.size(); i ++) {
                totalDamage += skillsList.get(i).skillDamage;
            }
            for (int j = 0; j < foodsList.size(); j ++) {
                totalHeal += foodsList.get(j).healAmount;
            }

            if (totalDamage < 50) {
                this.offense = "weak";
            }
            else if (totalDamage < 200) {
                this.offense = "novice";
            } else {
                this.offense = "all powerful boss";
            }

            if (totalHeal < 50) {
                this.defense = "weak";
            }
            else if (totalHeal < 200) {
                this.defense = "novice";
            } else {
                this.defense = "all powerful boss";
            }

            // read Kirby's stats
            return ("CurrentStats\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n" +
                    "username: " + this.username + "\t|\thealth: " + this.health +
                    "\nKirby has " + skillsList.size() + " powerful skill(s)\n" +
                    "Kirby has " + foodsList.size() + " yummy food(s) equipped\n" +
                    "Offense level " + this.offense + "\t|\tDefense level " + this.defense + "\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
        }
    }

    public static void main(String[] args) throws InterruptedException, IOException {        // throw necessary if Thread.sleep fails of retrieving from the file fails
        BufferedImage image = new BufferedImage(320, 32, BufferedImage.TYPE_INT_RGB);       // set to a very long title
        Graphics g = image.getGraphics();       // any graphics will be displayed on this object
        g.setFont(new Font("Dialog", Font.PLAIN, 15));
        Graphics2D graphics = (Graphics2D) g;
        graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,     // smooth jagged edges with rendering options
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics.drawString("Welcome to Kirby!", 6, 24);

        for (int y = 0; y < 32; y++) {
            StringBuilder sb = new StringBuilder();

            for (int x = 0; x < 144; x++)
                sb.append(image.getRGB(x, y) == -16777216 ? " " : image.getRGB(x, y) == -1 ? "#" : "*");        // there are 16777216 possible chars and set the formatting for ASCII drawings
            if (sb.toString().trim().isEmpty()) continue;
            System.out.println(sb.toString());
        }
        Thread.sleep(2000);
        // print line by line since there aren't multiple frames to print. Wait before printing
        System.out.println("              @@@@@@@@@.....            ");
        System.out.println("         @,,,,,@,,,,,,,,,,,,,,*@        ");
        System.out.println("       /,,,,,,,,,,#*,,,,,,,,,,,,@.      ");
        System.out.println("      /*,,,,,,,,,@ @,,,,,,,,,,,,,@..    ");
        System.out.println("      /@,,,,,,,,##@,,,,&@@#,,,,,,@..    ");
        System.out.println("       @,,////,,,,,,,,,,,,////,,,,,@... ");
        System.out.println("    ####%*#%#@,,,,,///%,,,,,,,,,,,,,,,# ");
        System.out.println("   #&&&&&&&####%,,,,,,,,,,,,,,,,,,,,,/@ ");
        System.out.println("   &&&&&&&&&&%##%@,,,,,,,,,,,,@////(@   ");
        System.out.println("   @&&&&&&&&&&&%#@,,,,,,,,,,//*&##@     ");
        System.out.println("     @&&&&&&&&&##(////////*@#######@    ");
        System.out.println("       &@&&&&&&@.......@&&&########%    ");
        System.out.println("...... .       ............@@&&&&%@     ");
        System.out.println("..........     ......  .............    ");

        // MARK -- end of intro with title and create object
        // Begin by creating user then enter forever loop of creating skills/equipping food

        Scanner sc = new Scanner(System.in);
        System.out.println("Welcome Kirby! Are you ready to embark on a great quest to defeat the magic mirror?\n<hit enter to continue>");
        sc.nextLine();
        System.out.println("What will you name your powerful Kirby fighter?");
        String username = sc.next();

        // initialize Kirby with username
        Kirby a = new Kirby(username);
        System.out.println(a);
        while (true) {
            System.out.println("What would you like to do?\n" +
                    "1 - Learn a new skill\t | " +
                    "2 - Equip a new food\t | " +
                    "3 - Read skills\t | " +
                    "4 - Read foods equipped\t | " +
                    "5 - Unequip Skill\t | " +
                    "6 - Unequip Food\t | " +
                    "7 - Read stats");
            int userInputChoice = sc.nextInt();

            switch (userInputChoice) {
                case 1:
                    System.out.println("Great choice! You must be ready to fight the magic mirror at any time!!");
                    System.out.println("1 - Create your own skill\t|\t" +
                            "2 - Create default skill");
                    int optionInput = sc.nextInt();
                    if (optionInput == 1) {
                        System.out.println("What is a description of this great power you are about to obtain?");
                        String skillDescriptionInput = sc.next();

                        System.out.println("How much damage does this skill do?:\nEnter a number: ");
                        double skillDamageInput = sc.nextDouble();
                        a.createSkill(skillDescriptionInput, skillDamageInput);
                    } else {
                        a.createDefaultSkill();
                    }

                    System.out.println("*You feel your Kirby powers strengthen as you steal the power of a magical beast*");
                    System.out.println("/");
                    Thread.sleep(1000);
                    System.out.println("-");
                    Thread.sleep(1000);
                    System.out.println("\\");
                    Thread.sleep(1000);
                    System.out.println("|");
                    Thread.sleep(1000);
                    System.out.println("Skill obtained!");
                    Thread.sleep(500);
                    System.out.println(a);
                    Thread.sleep(2000);
                    break;

                case 2:
                    System.out.println("Good job " + a.username + ", you must be able to heal up when fighting the final boss!" +
                            "\n1 - Create your own food\t|\t" +
                            "2 - Create default food");
                    optionInput = sc.nextInt();

                    if (optionInput == 1) {
                        System.out.println("What's the name of your magical food?");
                        String foodNameInput = sc.next();

                        System.out.println("How much does your food heal?\nEnter a number:");
                        double healAmountInput = sc.nextInt();

                        a.createFood(foodNameInput, healAmountInput);
                    } else {
                        a.createDefaultFood();
                    }

                    System.out.println("*Currently inhaling food*");

                    // MARK -- display Kirby ASCII animations from txt file
                    // utilized txt file in order to effectively pull images in the least # of lines
                    // placed retrieving method for reading file in main rather than Foods so Foods focuses on modifying objects while any
                    // additional formatting for the user is performed on the main class
                    BufferedReader br = new BufferedReader(new FileReader("kirbyEatFood.txt"));
                    try {
                        StringBuilder sb = new StringBuilder();
                        String line = br.readLine();

                        while (line != null) {
                            if (line.equals("Break")) {
                                Thread.sleep(1000);     // wait between each frame
                                System.out.println(sb.toString());
                                sb.setLength(0);        // clear StringBuilder before printing next frame
                                line = br.readLine();
                            } else {
                                sb.append(line);
                                sb.append(System.lineSeparator());
                                line = br.readLine();
                            }
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();        // catch any exceptions thrown by Thread.sleep and file opening/closing
                    } finally {
                        br.close();
                    }
                    System.out.println("Food obtained!");
                    Thread.sleep(500);
                    System.out.println(a);
                    Thread.sleep(2000);     // wait before displaying menu

                    break;
                case 3:
                    a.readSkills();
                    break;
                case 4:
                   a.readFoods();
                    break;
                case 5:
                    a.deleteSkill();
                    break;
                case 6:
                    a.deleteFood();
                    break;
                case 7:
                    System.out.println(a);
                    break;
            }
        }
    }
}
